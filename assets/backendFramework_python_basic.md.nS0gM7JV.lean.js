import{_ as o,c as a,a3 as t,o as d}from"./chunks/framework.CqcJeF4B.js";const m=JSON.parse('{"title":"基础","description":"","frontmatter":{},"headers":[],"relativePath":"backendFramework/python/basic.md","filePath":"backendFramework/python/basic.md","lastUpdated":1752217258000}'),r={name:"backendFramework/python/basic.md"};function n(i,e,c,l,s,h){return d(),a("div",null,e[0]||(e[0]=[t('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /grady/backendFramework/python/basic.md for this page in Markdown format</div><h1 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h1><h2 id="逻辑值检测" tabindex="-1">逻辑值检测 <a class="header-anchor" href="#逻辑值检测" aria-label="Permalink to &quot;逻辑值检测&quot;">​</a></h2><p>任何对象都可以进行逻辑值的检测，在默认情况下，一个对象会被视为具有真值，除非其所属的类定义了在对象上调用时返回 False 的 <strong>bool</strong>() 方法或者返回零的 <strong>len</strong>() 方法。</p><p>基本完整地列出了具有假值的内置对象：</p><ul><li>被定义为假植的常年 <code>None</code>, <code>False</code></li><li>任何数值类型的零：<code>0, 0.0, 0j, Decimal(0), Fraction(0, 1)</code></li><li>空序列：<code>&#39;&#39;, (), [], {}, set(), range(0)</code></li></ul><h2 id="布尔运算-and-or-not" tabindex="-1">布尔运算 --- and, or, not <a class="header-anchor" href="#布尔运算-and-or-not" aria-label="Permalink to &quot;布尔运算 --- and, or, not&quot;">​</a></h2><p>优先级and, or, not 从左到右。</p><h2 id="比较运算" tabindex="-1">比较运算 <a class="header-anchor" href="#比较运算" aria-label="Permalink to &quot;比较运算&quot;">​</a></h2><p>在Python 中，有八种比较运算符，<code>&gt; &gt;= &lt; &lt;= == != is is not</code>，他们的优先级相同。</p><ul><li>不同类型的对象不能进行比较，会抛出 <code>TypeError</code>。</li><li><code>is</code> 和 <code>is not</code> 运算符用于判断两个变量是否为同一个对象，而不是比较它们的值。</li><li><code>==</code> 和 <code>!=</code> 运算符用于判断两个对象的值是否相等。</li><li><code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code> 运算符用于比较两个对象的大小关系。</li><li>不同标识的类的实例通常为不想等，除非类定义了<code>__eq__()</code></li></ul><h2 id="数字类型-int-float-complex" tabindex="-1">数字类型 --- int, float, complex <a class="header-anchor" href="#数字类型-int-float-complex" aria-label="Permalink to &quot;数字类型 --- int, float, complex&quot;">​</a></h2><p>整数, 浮点数 和 复数</p>',13)]))}const u=o(r,[["render",n]]);export{m as __pageData,u as default};
